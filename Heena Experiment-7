.Aim: Create a Java program to connect to a MySQL database and fetch
data from a single table. The program should: Use DriverManager and
Connection objects. Retrieve and display all records from a table named
Employee with columns EmpID, Name, and Salary..

Code:
import java.sql.*;
public class FetchEmployeeData {
public static void main(String[] args) {
String url = "jdbc:mysql://localhost:3306/testdb";
String user = "root";
String password = "password";
String query = "SELECT EmpID, Name, Salary FROM Employee";
try {
// Load MySQL JDBC driver
Class.forName("com.mysql.cj.jdbc.Driver");
// Establish connection
Connection con = DriverManager.getConnection(url, user, password);
System.out.println("Connected to the database!");
// Create statement and execute query
Statement stmt = con.createStatement();
ResultSet rs = stmt.executeQuery(query);
// Display results
System.out.println("\nEmployee Records:")
System.out.println("--------------------------------------");
System.out.printf("%-10s %-20s %-10s%n", "EmpID", "Name", "Salary");
System.out.println("--------------------------------------");
while (rs.next()) {
int empID = rs.getInt("EmpID");
String name = rs.getString("Name");
double salary = rs.getDouble("Salary");
System.out.printf("%-10d %-20s %-10.2f%n", empID, name, salary);
}
// Close resources
rs.close();
stmt.close();
con.close();
System.out.println("\nConnection closed.");
} catch (ClassNotFoundException e) {
System.out.println("MySQL Driver not found: " + e.getMessage());
} catch (SQLException e) {
System.out.println("SQL Error: " + e.getMessage());
}
}
}

7.2 Aim:Build a program to perform CRUD operations (Create, Read, Update,
Delete) on a database table Product with columns: ProductID, ProductName,
Price, and Quantity. The program should include: Menu-driven options for each
operation. Transaction handling to ensure data integrity.

7.2.3Code:
import java.sql.*;
import java.util.Scanner;
public class ProductCRUD {
private static final String URL = "jdbc:mysql://localhost:3306/ProductDB";
private static final String USER = "root";
private static final String PASSWORD = "password";
public static void main(String[] args) {
Scanner scanner = new Scanner(System.in);
try (Connection conn = DriverManager.getConnection(URL, USER, PASSWORD)) {
Class.forName("com.mysql.cj.jdbc.Driver");
System.out.println("Connected to the database!");
boolean exit = false;
while (!exit) {
System.out.println("\n=== Product CRUD Operations ===");
System.out.println("1. Create Product");
System.out.println("2. Read Products");
System.out.println("3. Update Product");
System.out.println("4. Delete Product");
System.out.println("5. Exit");
System.out.print("Choose an option: ");
int choice = scanner.nextInt();
DEPARTMENT OF
COMPUTER SCIENCE & ENGINEERING
scanner.nextLine();
switch (choice) {
case 1 -> createProduct(conn, scanner);
case 2 -> readProducts(conn);
case 3 -> updateProduct(conn, scanner);
case 4 -> deleteProduct(conn, scanner);
case 5 -> exit = true;
default -> System.out.println("Invalid option. Try again.");
}
}
} catch (ClassNotFoundException e) {
System.out.println("MySQL Driver not found: " + e.getMessage());
} catch (SQLException e) {
System.out.println("SQL Error: " + e.getMessage());
}
scanner.close();
}
private static void createProduct(Connection conn, Scanner scanner) throws SQLException {
System.out.print("Enter product name: ");
String name = scanner.nextLine();
System.out.print("Enter price: ");
double price = scanner.nextDouble();
System.out.print("Enter quantity: ");
int quantity = scanner.nextInt();
String query = "INSERT INTO Product (ProductName, Price, Quantity) VALUES (?, ?,
?)";
try (PreparedStatement pstmt = conn.prepareStatement(query)) {
conn.setAutoCommit(false);
pstmt.setString(1, name);
pstmt.setDouble(2, price);
pstmt.setInt(3, quantity);
int rows = pstmt.executeUpdate();
conn.commit();
System.out.println(rows + " product(s) inserted successfully!");
DEPARTMENT OF
COMPUTER SCIENCE & ENGINEERING
} catch (SQLException e) {
conn.rollback();
System.out.println("Transaction rolled back due to error: " + e.getMessage());
} finally {
conn.setAutoCommit(true);
}
}
private static void readProducts(Connection conn) throws SQLException {
String query = "SELECT * FROM Product";
try (Statement stmt = conn.createStatement();
ResultSet rs = stmt.executeQuery(query)) {
System.out.println("\nProduct Records:");
System.out.println("--------------------------------------------------");
System.out.printf("%-10s %-20s %-10s %-10s%n", "ProductID", "ProductName",
"Price", "Quantity");
System.out.println("--------------------------------------------------");
while (rs.next()) {
int id = rs.getInt("ProductID");
String name = rs.getString("ProductName");
double price = rs.getDouble("Price");
int quantity = rs.getInt("Quantity");
System.out.printf("%-10d %-20s %-10.2f %-10d%n", id, name, price, quantity);
}
}
}
private static void updateProduct(Connection conn, Scanner scanner) throws SQLException
{
System.out.print("Enter product ID to update: ");
int id = scanner.nextInt();
scanner.nextLine();
System.out.print("Enter new name: ");
String name = scanner.nextLine();
System.out.print("Enter new price: ");
DEPARTMENT OF
COMPUTER SCIENCE & ENGINEERING
double price = scanner.nextDouble();
System.out.print("Enter new quantity: ");
int quantity = scanner.nextInt();
String query = "UPDATE Product SET ProductName = ?, Price = ?, Quantity = ? WHERE ProductID = ?";
try (PreparedStatement pstmt = conn.prepareStatement(query)) {
conn.setAutoCommit(false);
pstmt.setString(1, name);
pstmt.setDouble(2, price);
pstmt.setInt(3, quantity);
pstmt.setInt(4, id);
int rows = pstmt.executeUpdate();
conn.commit();
System.out.println(rows + " product(s) updated successfully!");
} catch (SQLException e) {
conn.rollback();
System.out.println("Transaction rolled back due to error: " + e.getMessage());
} finally {
conn.setAutoCommit(true);
}
}
private static void deleteProduct(Connection conn, Scanner scanner) throws SQLException {
System.out.print("Enter product ID to delete: ");
int id = scanner.nextInt();
String query = "DELETE FROM Product WHERE ProductID = ?";
try (PreparedStatement pstmt = conn.prepareStatement(query)) {
conn.setAutoCommit(false);
pstmt.setInt(1, id);
int rows = pstmt.executeUpdate();
conn.commit();
System.out.println(rows + " product(s) deleted successfully!");
DEPARTMENT OF
COMPUTER SCIENCE & ENGINEERING
} catch (SQLException e) {
conn.rollback();
System.out.println("Transaction rolled back due to error: " + e.getMessage());
} finally {
conn.setAutoCommit(true);
}
}
}

